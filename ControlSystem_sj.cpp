//  -----------------------------------------------------------------------------
//   Project: Myne
//   File: n4\pkg\MrServers\MrImaging\seq\a_cv_nav_ib\ControlSystemIB2.cpp
//   Version: 1.0
//   Author: Ian Burger
//   Date: 28/09/2009
//   Language: C++
//   Descrip: the control system
//
//  -----------------------------------------------------------------------------
//
// notes:
// terwyl nav run, word input elke sample period gegee, waar saple period gelyk is aan trnav.
// as die laaste nav gerun word kan ek die proses versnell, dat ek al die predicted
// data gelyk vir acquisition planning kan gebruik.
// dan hoef ek nie gedeurende aqcuisition die control te access nie.
//	------------------------------------------------------------------------------
// Porting Ian's control system to VE11
//	------------------------------------------------------------------------------

//ControlSystemIB2::

// Header files ------------------

#include "ControlSystem_sj.h"
#define PI 3.14159 

//#include "mmatrix.h"

		//*realsample*/double sampleval[2000] = {-0.18148,-0.16816,-0.15427,-0.13985,-0.12493,-0.10954,-0.093711,-0.077485,-0.060898,-0.043986,-0.026789,-0.0093492,0.0082926,0.026093,0.044007,0.06199,0.079996,0.097977,0.11589,0.13368,0.1513,0.1687,0.18583,0.20264,0.21909,0.23512,0.25068,0.26573,0.28021,0.29407,0.30727,0.31976,0.3315,0.34244,0.35254,0.36176,0.37005,0.37739,0.38374,0.38906,0.39333,0.39651,0.39858,0.39952,0.39931,0.39793,0.39536,0.3916,0.38663,0.38044,0.37304,0.36442,0.35459,0.34354,0.3313,0.31786,0.30325,0.28749,0.27058,0.25256,0.23345,0.21329,0.1921,0.16993,0.1468,0.12278,0.097907,0.072228,0.045803,0.018688,-0.0090533,-0.037358,-0.066156,-0.095379,-0.12495,-0.1548,-0.18484,-0.215,-0.24519,-0.27532,-0.30532,-0.33509,-0.36455,-0.3936,-0.42215,-0.45013,-0.47744,-0.50399,-0.5297,-0.55449,-0.57827,-0.60097,-0.62251,-0.64281,-0.66182,-0.67946,-0.69567,-0.7104,-0.7236,-0.73522,-0.74522,-0.75356,-0.76022,-0.76516,-0.76838,-0.76985,-0.76957,-0.76753,-0.76375,-0.75822,-0.75097,-0.74201,-0.73138,-0.71909,-0.7052,-0.68973,-0.67274,-0.65428,-0.63439,-0.61315,-0.5906,-0.56682,-0.54187,-0.51583,-0.48876,-0.46075,-0.43185,-0.40216,-0.37175,-0.34069,-0.30907,-0.27696,-0.24444,-0.21159,-0.17848,-0.14519,-0.1118,-0.078376,-0.044992,-0.01172,0.021374,0.054221,0.086759,0.11893,0.15066,0.18191,0.21262,0.24275,0.27223,0.30104,0.32913,0.35646,0.38299,0.4087,0.43356,0.45754,0.48063,0.50279,0.52403,0.54432,0.56365,0.58203,0.59945,0.6159,0.63139,0.64591,0.65948,0.6721,0.68377,0.69451,0.70431,0.7132,0.72117,0.72824,0.73442,0.73972,0.74416,0.74774,0.75047,0.75238,0.75347,0.75376,0.75326,0.75198,0.74994,0.74715,0.74362,0.73937,0.7344,0.72873,0.72236,0.71531,0.70758,0.69918,0.69011,0.68039,0.67001,0.65898,0.6473,0.63497,0.62199,0.60837,0.5941,0.57919,0.56364,0.54744,0.5306,0.51311,0.49499,0.47622,0.4568,0.43675,0.41606,0.39474,0.37279,0.35021,0.32702,0.30323,0.27883,0.25386,0.22831,0.2022,0.17556,0.14839,0.12072,0.092568,0.063961,0.034921,0.0054779,-0.02434,-0.0545,-0.084967,-0.11571,-0.14668,-0.17784,-0.20914,-0.24055,-0.27201,-0.30346,-0.33486,-0.36614,-0.39726,-0.42814,-0.45873,-0.48897,-0.51877,-0.54809,-0.57684,-0.60497,-0.6324,-0.65906,-0.68488,-0.70979,-0.73373,-0.75662,-0.77841,-0.79902,-0.81839,-0.83647,-0.85318,-0.86849,-0.88232,-0.89463,-0.90538,-0.91452,-0.922,-0.9278,-0.93188,-0.93421,-0.93478,-0.93356,-0.93054,-0.92572,-0.91909,-0.91065,-0.90041,-0.88839,-0.87461,-0.85908,-0.84184,-0.82291,-0.80235,-0.78019,-0.75648,-0.73127,-0.70463,-0.6766,-0.64727,-0.61668,-0.58492,-0.55207,-0.51818,-0.48336,-0.44767,-0.41121,-0.37405,-0.33628,-0.29799,-0.25927,-0.22021,-0.18089,-0.14141,-0.10184,-0.062276,-0.0228,0.016508,0.055566,0.094299,0.13263,0.17049,0.20782,0.24453,0.28058,0.31591,0.35045,0.38416,0.41699,0.44889,0.47983,0.50977,0.53866,0.56649,0.59322,0.61883,0.64329,0.66658,0.68869,0.7096,0.7293,0.74778,0.76502,0.78101,0.79576,0.80925,0.82147,0.83243,0.84212,0.85054,0.85769,0.86356,0.86816,0.87149,0.87354,0.87433,0.87386,0.87212,0.86914,0.8649,0.85943,0.85273,0.84481,0.83567,0.82535,0.81384,0.80116,0.78733,0.77237,0.7563,0.73913,0.72089,0.70161,0.6813,0.65999,0.63771,0.61449,0.59036,0.56535,0.5395,0.51283,0.48539,0.4572,0.42831,0.39875,0.36857,0.33781,0.3065,0.2747,0.24244,0.20978,0.17677,0.14345,0.10988,0.076119,0.042213,0.0082253,-0.025787,-0.059761,-0.093637,-0.12735,-0.16084,-0.19403,-0.22686,-0.25926,-0.29116,-0.3225,-0.35319,-0.38318,-0.41238,-0.44073,-0.46815,-0.49459,-0.51997,-0.54422,-0.56728,-0.58909,-0.60959,-0.62872,-0.64644,-0.66268,-0.67741,-0.69058,-0.70215,-0.71209,-0.72037,-0.72696,-0.73185,-0.73501,-0.73645,-0.73614,-0.7341,-0.73032,-0.72481,-0.71759,-0.70868,-0.6981,-0.68587,-0.67203,-0.65662,-0.63967,-0.62123,-0.60135,-0.58009,-0.55749,-0.53363,-0.50855,-0.48234,-0.45505,-0.42676,-0.39753,-0.36744,-0.33657,-0.30498,-0.27275,-0.23996,-0.20668,-0.17298,-0.13894,-0.10464,-0.070132,-0.035502,-0.00081523,0.033859,0.068454,0.1029,0.13714,0.17111,0.20473,0.23797,0.27074,0.303,0.3347,0.36576,0.39614,0.42578,0.45464,0.48266,0.50978,0.53596,0.56116,0.58531,0.60839,0.63033,0.6511,0.67066,0.68895,0.70595,0.72161,0.73589,0.74876,0.76018,0.77013,0.77856,0.78546,0.79079,0.79454,0.79669,0.79722,0.79612,0.79339,0.789,0.78298,0.7753,0.76598,0.75503,0.74245,0.72826,0.71248,0.69512,0.6762,0.65576,0.63381,0.61039,0.58554,0.55928,0.53166,0.50271,0.47248,0.44101,0.40835,0.37455,0.33966,0.30372,0.26681,0.22896,0.19025,0.15072,0.11045,0.069501,0.027934,-0.014178,-0.056767,-0.099758,-0.14308,-0.18665,-0.2304,-0.27423,-0.31808,-0.36185,-0.40545,-0.44881,-0.49181,-0.53438,-0.57642,-0.61783,-0.65853,-0.6984,-0.73737,-0.77533,-0.81219,-0.84786,-0.88224,-0.91524,-0.94678,-0.97676,-1.0051,-1.0318,-1.0566,-1.0796,-1.1007,-1.1197,-1.1368,-1.1517,-1.1645,-1.175,-1.1834,-1.1895,-1.1933,-1.1949,-1.1941,-1.191,-1.1856,-1.1779,-1.1679,-1.1556,-1.1411,-1.1244,-1.1056,-1.0846,-1.0615,-1.0364,-1.0094,-0.98052,-0.94979,-0.91733,-0.8832,-0.84749,-0.81028,-0.77166,-0.73171,-0.69054,-0.64822,-0.60487,-0.56058,-0.51544,-0.46957,-0.42304,-0.37598,-0.32848,-0.28064,-0.23257,-0.18436,-0.13611,-0.087919,-0.03989,0.0078863,0.055315,0.10231,0.14877,0.19462,0.23977,0.28414,0.32766,0.37025,0.41183,0.45235,0.49173,0.52993,0.56688,0.60253,0.63684,0.66976,0.70126,0.7313,0.75986,0.78691,0.81243,0.83641,0.85883,0.8797,0.899,0.91673,0.93291,0.94754,0.96062,0.97218,0.98223,0.99078,0.99784,1.0035,1.0076,1.0104,1.0118,1.0118,1.0104,1.0078,1.0038,0.99858,0.99211,0.98441,0.97552,0.96544,0.95422,0.94186,0.92838,0.91382,0.89819,0.88151,0.86379,0.84507,0.82536,0.80467,0.78303,0.76046,0.73697,0.71259,0.68733,0.66122,0.63427,0.6065,0.57794,0.5486,0.51852,0.4877,0.45618,0.42398,0.39112,0.35763,0.32352,0.28883,0.25358,0.21779,0.18148,0.14469,0.10743,0.069734,0.031625,-0.006872,-0.04573,-0.084922,-0.12442,-0.1642,-0.20422,-0.24446,-0.28488,-0.32545,-0.36613,-0.40688,-0.44766,-0.48842,-0.52913,-0.56972,-0.61015,-0.65036,-0.69029,-0.72989,-0.76908,-0.80781,-0.84601,-0.8836,-0.92051,-0.95666,-0.99199,-1.0264,-1.0598,-1.0922,-1.1234,-1.1533,-1.1819,-1.2091,-1.2349,-1.259,-1.2816,-1.3024,-1.3214,-1.3385,-1.3537,-1.3669,-1.3781,-1.3871,-1.394,-1.3987,-1.4012,-1.4014,-1.3993,-1.3949,-1.3882,-1.3791,-1.3677,-1.3541,-1.3381,-1.3198,-1.2993,-1.2765,-1.2516,-1.2245,-1.1954,-1.1642,-1.1311,-1.0961,-1.0593,-1.0207,-0.98053,-0.93879,-0.89558,-0.85101,-0.80516,-0.75815,-0.71007,-0.66102,-0.61112,-0.56048,-0.50918,-0.45736,-0.40511,-0.35253,-0.29975,-0.24685,-0.19396,-0.14116,-0.088569,-0.036274,0.015625,0.067034,0.11786,0.16802,0.21743,0.266,0.31367,0.36035,0.40597,0.45048,0.49381,0.53591,0.57671,0.61618,0.65427,0.69094,0.72615,0.75987,0.79209,0.82277,0.85189,0.87944,0.90541,0.92979,0.95258,0.97376,0.99335,1.0113,1.0278,1.0426,1.0559,1.0676,1.0778,1.0865,1.0936,1.0994,1.1036,1.1065,1.108,1.1081,1.1068,1.1043,1.1005,1.0954,1.089,1.0815,1.0728,1.063,1.052,1.0399,1.0268,1.0126,0.99742,0.98124,0.96408,0.94598,0.92694,0.90701,0.88618,0.86449,0.84196,0.81859,0.79442,0.76945,0.74371,0.7172,0.68996,0.66199,0.63331,0.60394,0.5739,0.5432,0.51186,0.4799,0.44733,0.41419,0.38049,0.34624,0.31148,0.27621,0.24046,0.20426,0.16763,0.13058,0.09314,0.05534,0.017202,-0.021247,-0.059978,-0.098964,-0.13817,-0.17757,-0.21713,-0.25682,-0.29659,-0.33641,-0.37624,-0.41604,-0.45576,-0.49535,-0.53477,-0.57397,-0.61289,-0.65148,-0.68968,-0.72743,-0.76469,-0.80138,-0.83746,-0.87285,-0.90751,-0.94137,-0.97436,-1.0064,-1.0375,-1.0676,-1.0965,-1.1243,-1.1509,-1.1761,-1.2,-1.2225,-1.2435,-1.2629,-1.2808,-1.297,-1.3115,-1.3242,-1.3352,-1.3443,-1.3515,-1.3569,-1.3603,-1.3619,-1.3614,-1.3591,-1.3548,-1.3485,-1.3403,-1.3302,-1.3182,-1.3043,-1.2886,-1.271,-1.2517,-1.2306,-1.2079,-1.1834,-1.1574,-1.1297,-1.1006,-1.07,-1.038,-1.0047,-0.97012,-0.93433,-0.89742,-0.85944,-0.82049,-0.78062,-0.73992,-0.69847,-0.65633,-0.61358,-0.57031,-0.52657,-0.48244,-0.43799,-0.3933,-0.34843,-0.30343,-0.25839,-0.21336,-0.16841,-0.12359,-0.078961,-0.034585,0.0094843,0.053191,0.096481,0.1393,0.18161,0.22334,0.26445,0.3049,0.34462,0.38359,0.42175,0.45905,0.49546,0.53093,0.5654,0.59885,0.63123,0.6625,0.69261,0.72153,0.74921,0.77563,0.80073,0.82448,0.84685,0.86781,0.88731,0.90534,0.92185,0.93682,0.95023,0.96206,0.97229,0.9809,0.98787,0.99319,0.99686,0.99887,0.99922,0.9979,0.99492,0.99028,0.984,0.97608,0.96653,0.95538,0.94263,0.92831,0.91244,0.89504,0.87615,0.8558,0.83401,0.81083,0.78629,0.76044,0.73333,0.70499,0.6755,0.6449,0.61325,0.58062,0.54706,0.51266,0.47748,0.4416,0.40509,0.36804,0.33053,0.29265,0.25448,0.21611,0.17763,0.13914,0.10073,0.062501,0.02454,-0.013051,-0.050177,-0.086739,-0.12264,-0.15779,-0.19209,-0.22545,-0.25777,-0.28898,-0.31897,-0.34768,-0.37502,-0.40091,-0.42529,-0.44809,-0.46925,-0.4887,-0.50641,-0.52232,-0.53639,-0.54859,-0.55888,-0.56725,-0.57369,-0.57816,-0.58069,-0.58125,-0.57987,-0.57655,-0.57131,-0.56418,-0.55518,-0.54435,-0.53173,-0.51737,-0.50132,-0.48362,-0.46435,-0.44355,-0.42131,-0.39768,-0.37274,-0.34658,-0.31925,-0.29086,-0.26146,-0.23116,-0.20002,-0.16814,-0.1356,-0.10248,-0.068869,-0.034845,-0.00049495,0.034098,0.068849,0.10368,0.1385,0.17323,0.20779,0.2421,0.27608,0.30964,0.34272,0.37522,0.40708,0.43823,0.46857,0.49805,0.52659,0.55413,0.58059,0.6059,0.63001,0.65286,0.67438,0.69452,0.71322,0.73044,0.74613,0.76023,0.77272,0.78355,0.79268,0.8001,0.80577,0.80967,0.81178,0.81209,0.81059,0.80729,0.80217,0.79525,0.78654,0.77604,0.76379,0.74979,0.73409,0.7167,0.69767,0.67703,0.65483,0.63112,0.60593,0.57934,0.55138,0.52213,0.49165,0.46,0.42724,0.39346,0.35872,0.3231,0.28668,0.24954,0.21175,0.17341,0.13459,0.095391,0.055891,0.016181,-0.023649,-0.06351,-0.10331,-0.14296,-0.18236,-0.22143,-0.26007,-0.29819,-0.3357,-0.37251,-0.40852,-0.44366,-0.47784,-0.51096,-0.54295,-0.57372,-0.6032,-0.63131,-0.65797,-0.68312,-0.70668,-0.72861,-0.74883,-0.76729,-0.78394,-0.79874,-0.81164,-0.8226,-0.8316,-0.83861,-0.8436,-0.84656,-0.84748,-0.84636,-0.84318,-0.83797,-0.83072,-0.82146,-0.81021,-0.79699,-0.78184,-0.76479,-0.74589,-0.72518,-0.70272,-0.67855,-0.65275,-0.62537,-0.59648,-0.56616,-0.53448,-0.50151,-0.46734,-0.43205,-0.39572,-0.35844,-0.3203,-0.2814,-0.2418,-0.20162,-0.16094,-0.11984,-0.078422,-0.03677,0.0050262,0.046881,0.088708,0.13042,0.17194,0.21319,0.25407,0.29452,0.33446,0.37381,0.4125,0.45046,0.48762,0.5239,0.55925,0.59359,0.62687,0.65902,0.68999,0.71972,0.74814,0.77522,0.80089,0.82511,0.84784,0.86903,0.88863,0.90662,0.92295,0.9376,0.95052,0.9617,0.97112,0.97874,0.98455,0.98853,0.99068,0.99099,0.98946,0.98608,0.98086,0.9738,0.96493,0.95425,0.94179,0.92757,0.91161,0.89396,0.87463,0.85368,0.83114,0.80706,0.78148,0.75445,0.72604,0.69628,0.66525,0.633,0.5996,0.56511,0.5296,0.49313,0.45579,0.41764,0.37875,0.33921,0.2991,0.25849,0.21747,0.17612,0.13453,0.092777,0.050959,0.0091623,-0.032523,-0.074007,-0.1152,-0.156,-0.19633,-0.23608,-0.27517,-0.3135,-0.35098,-0.38752,-0.42303,-0.45742,-0.4906,-0.52249,-0.553,-0.58205,-0.60957,-0.63549,-0.65973,-0.68223,-0.70294,-0.72179,-0.73874,-0.75374,-0.76676,-0.77776,-0.78672,-0.79362,-0.79843,-0.80116,-0.80179,-0.80034,-0.79682,-0.79123,-0.78361,-0.77397,-0.76236,-0.74881,-0.73336,-0.71607,-0.69698,-0.67616,-0.65367,-0.62957,-0.60393,-0.57683,-0.54835,-0.51856,-0.48755,-0.4554,-0.4222,-0.38804,-0.353,-0.31718,-0.28066,-0.24354,-0.20591,-0.16785,-0.12945,-0.090806,-0.052003,-0.013125,0.025742,0.064515,0.10311,0.14145,0.17946,0.21705,0.25416,0.29071,0.32663,0.36186,0.39632,0.42996,0.46271,0.49451,0.5253,0.55504,0.58365,0.6111,0.63734,0.66231,0.68597,0.70829,0.72921,0.74871,0.76674,0.78328,0.79829,0.81175,0.82362,0.8339,0.84255,0.84956,0.85492,0.85862,0.86065,0.86101,0.8597,0.85673,0.8521,0.84583,0.83792,0.82841,0.81729,0.80462,0.7904,0.77466,0.75746,0.7388,0.71875,0.69732,0.67458,0.65056,0.6253,0.59886,0.57129,0.54264,0.51295,0.4823,0.45072,0.41829,0.38505,0.35108,0.31643,0.28117,0.24536,0.20906,0.17235,0.1353,0.097967,0.060429,0.022758,-0.014975,-0.052695,-0.090327,-0.1278,-0.16502,-0.20193,-0.23844,-0.27448,-0.30996,-0.34481,-0.37894,-0.41228,-0.44474,-0.47627,-0.50676,-0.53617,-0.5644,-0.5914,-0.61709,-0.64141,-0.66431,-0.68571,-0.70557,-0.72384,-0.74047,-0.75542,-0.76865,-0.78013,-0.78983,-0.79773,-0.80381,-0.80806,-0.81048,-0.81105,-0.80978,-0.80668,-0.80177,-0.79505,-0.78655,-0.7763,-0.76432,-0.75066,-0.73535,-0.71844,-0.69997,-0.68,-0.65858,-0.63577,-0.61163,-0.58622,-0.55961,-0.53186,-0.50305,-0.47325,-0.44252,-0.41095,-0.3786,-0.34555,-0.31188,-0.27766,-0.24298,-0.2079,-0.17251,-0.13688,-0.1011,-0.065226,-0.029351,0.0064516,0.042106,0.077536,0.11266,0.14742,0.18172,0.21551,0.24869,0.28121,0.31299,0.34397,0.37407,0.40324,0.4314,0.4585,0.48447,0.50926,0.53282,0.55508,0.576,0.59553,0.61362,0.63024,0.64534,0.65889,0.67085,0.68121,0.68993,0.697,0.7024,0.70612,0.70814,0.70848,0.70711,0.70406,0.69932,0.69291,0.68484,0.67513,0.66381,0.65088,0.6364,0.62038,0.60285,0.58387,0.56346,0.54166,0.51854,0.49412,0.46845,0.4416,0.41362,0.38455,0.35447,0.32343,0.29149,0.25873,0.22521,0.191,0.15618,0.12082,0.084995,0.048789,0.01228,-0.024449,-0.061314,-0.098232,-0.13511,-0.17188,-0.20843,-0.24468,-0.28055,-0.31594,-0.35077,-0.38495,-0.41839,-0.45101,-0.48272,-0.51345,-0.54312,-0.57164,-0.59894,-0.62496,-0.64963,-0.67287,-0.69465,-0.71489,-0.73355,-0.75058,-0.76594,-0.7796,-0.79152,-0.80167,-0.81003,-0.81659,-0.82133,-0.82424,-0.82533,-0.82459,-0.82204,-0.81768,-0.81154,-0.80363,-0.79398,-0.78263,-0.7696,-0.75495,-0.7387,-0.72092,-0.70165,-0.68095,-0.65888,-0.63548,-0.61084,-0.585,-0.55804,-0.53002,-0.501,-0.47107,-0.44027,-0.4087,-0.37641,-0.34347,-0.30996,-0.27594,-0.24148,-0.20665,-0.17152,-0.13616,-0.10063,-0.064996,-0.029323,0.0063266,0.04189,0.077308,0.11252,0.14747,0.1821,0.21636,0.25019,0.28354,0.31637,0.34862,0.38024,0.41119,0.44143,0.4709,0.49957,0.5274,0.55434,0.58035,0.6054,0.62944,0.65243,0.67435,0.69515,0.7148,0.73327,0.75053,0.76654,0.78128,0.79472,0.80684,0.81761,0.82702,0.83503,0.84164,0.84682,0.85057,0.85286,0.85369,0.85304,0.85092,0.84731,0.84221,0.83563,0.82756,0.818,0.80697,0.79447,0.78051,0.7651,0.74826,0.73001,0.71036,0.68934,0.66696,0.64326,0.61826,0.59199,0.56448,0.53578,0.5059,0.4749,0.44281,0.40968,0.37556,0.34048,0.3045,0.26767,0.23006,0.19171,0.15269,0.11307,0.072908,0.03228,-0.0087414,-0.05008,-0.091657,-0.13339,-0.1752,-0.21699,-0.25868,-0.30018,-0.34139,-0.38223,-0.42261,-0.46242,-0.50157,-0.53998,-0.57754,-0.61417,-0.64977,-0.68425,-0.71753,-0.74953,-0.78014,-0.80931,-0.83694,-0.86297,-0.88732,-0.90993,-0.93074,-0.94969,-0.96672,-0.9818,-0.99487,-1.0059,-1.0149,-1.0217,-1.0265,-1.0291,-1.0296,-1.0279,-1.0241,-1.0182,-1.0101,-1,-0.98778,-0.97352,-0.95725,-0.93901,-0.91884,-0.89681,-0.87296,-0.84735,-0.82005,-0.79112,-0.76064,-0.72869,-0.69534,-0.66068,-0.62479,-0.58775,-0.54967,-0.51063,-0.47073,-0.43005,-0.3887,-0.34678,-0.30437,-0.26158,-0.21851,-0.17524,-0.13187,-0.088499,-0.045217,-0.0021142,0.040719,0.083194,0.12522,0.16673,0.20762,0.24781,0.28725,0.32584,0.36352,0.40022,0.43588,0.47045,0.50386,0.53607,0.56704,0.59672,0.62509,0.6521,0.67773,0.70196,0.72477,0.74616,0.7661,0.78461,0.80167,0.81729,0.83148,0.84425,0.85562,0.86559,0.8742,0.88147,0.88742,0.89208,0.89548,0.89765,0.89864,0.89848,0.8972,0.89485,0.89147,0.8871,0.88178,0.87556,0.86849,0.8606,0.85195,0.84257,0.83253,0.82185,0.8106,0.79882,0.78657,0.77387,0.7608,0.74739,0.7337,0.71976,0.70564,0.69138,0.67702,0.66261,0.6482,0.63383,0.61955,0.6054,0.59143,0.57767,0.56417,0.55096,0.53809,0.52558,0.51348,0.50182,0.49062,0.47993,0.46975,0.46013,0.45108,0.44263,0.43478,0.42757,0.421,0.41508,0.40982,0.40523,0.40132,0.39808,0.39552,0.39364,0.39242,0.39188,0.39199,0.39275,0.39414,0.39616,0.39879,0.402,0.40578,0.41011,0.41495,0.42027,0.42605,0.43226,0.43885,0.44578,0.45301,0.46051,0.46821,0.47607,0.48404,0.49207,0.5001,0.50807,0.51593,0.52361,0.53106,0.53821,0.54501,0.55138,0.55727,0.56262,0.56736,0.57143,0.57478,0.57735,0.57909,0.57994,0.57984,0.57877,0.57667,0.57349,0.56921,0.56379,0.5572,0.5494,0.54039,0.53013,0.51861,0.50581,0.49174,0.47638,0.45973,0.44179,0.42258,0.4021,0.38037,0.35741,0.33324,0.3079,0.28141,0.25381,0.22515,0.19548,0.16483,0.13328,0.10088,0.067693,0.033788,-0.00076252,-0.035883,-0.071493,-0.10751,-0.14385,-0.18042,-0.21713,-0.25388,-0.29058,-0.32713,-0.36342,-0.39937,-0.43486,-0.46979,-0.50406,-0.53758,-0.57024,-0.60195,-0.6326,-0.66212,-0.6904,-0.71737,-0.74294,-0.76704,-0.78958,-0.81051,-0.82976,-0.84727,-0.863,-0.87688,-0.8889,-0.899,-0.90716,-0.91337,-0.9176,-0.91985,-0.92012,-0.9184,-0.91471,-0.90907,-0.9015,-0.89203,-0.88068,-0.86751,-0.85254,-0.83584,-0.81746,-0.79745,-0.77587,-0.75279,-0.72828,-0.70241,-0.67525,-0.64687,-0.61736,-0.5868,-0.55526,-0.52284,-0.4896,-0.45565,-0.42105,-0.38591,-0.35029,-0.31429,-0.27799,-0.24148,-0.20483,-0.16814,-0.13147,-0.094913,-0.058542,-0.022432,0.013342,0.04871,0.083602,0.11795,0.1517,0.18478,0.21714,0.24872,0.27947,0.30935,0.3383,0.3663,0.39331,0.41929,0.44421,0.46806,0.4908};
	/*sss*/double sampleval[2000] = {0.043968,0.087851,0.13156,0.17502,0.21814,0.26084,0.30304,0.34464,0.38558,0.42578,0.46515,0.50362,0.54112,0.57757,0.61291,0.64706,0.67995,0.71154,0.74174,0.77051,0.79779,0.82353,0.84768,0.87018,0.89101,0.91011,0.92745,0.94299,0.95671,0.96858,0.97858,0.98669,0.99288,0.99716,0.99951,0.99992,0.9984,0.99495,0.98958,0.98229,0.9731,0.96203,0.9491,0.93433,0.91775,0.89941,0.87932,0.85753,0.83408,0.80902,0.78239,0.75425,0.72465,0.69365,0.66131,0.62769,0.59286,0.55688,0.51982,0.48175,0.44276,0.40291,0.36228,0.32094,0.27899,0.2365,0.19355,0.15023,0.10661,0.062791,0.018848,-0.02513,-0.06906,-0.11286,-0.15643,-0.19971,-0.2426,-0.28502,-0.32689,-0.36812,-0.40865,-0.44838,-0.48725,-0.52517,-0.56208,-0.5979,-0.63257,-0.66601,-0.69817,-0.72897,-0.75836,-0.78629,-0.81269,-0.83753,-0.86074,-0.88229,-0.90213,-0.92023,-0.93655,-0.95106,-0.96372,-0.97453,-0.98345,-0.99046,-0.99556,-0.99874,-0.99998,-0.99929,-0.99667,-0.99211,-0.98564,-0.97727,-0.967,-0.95486,-0.94088,-0.92508,-0.90748,-0.88814,-0.86707,-0.84433,-0.81995,-0.79399,-0.76649,-0.73751,-0.70711,-0.67533,-0.64225,-0.60793,-0.57243,-0.53583,-0.49819,-0.45958,-0.42009,-0.37978,-0.33874,-0.29704,-0.25477,-0.21201,-0.16883,-0.12533,-0.081591,-0.03769,0.0062831,0.050244,0.094108,0.13779,0.18121,0.22427,0.2669,0.30902,0.35053,0.39137,0.43146,0.4707,0.50904,0.54639,0.58269,0.61786,0.65183,0.68455,0.71594,0.74594,0.7745,0.80157,0.82708,0.85099,0.87326,0.89384,0.91269,0.92978,0.94506,0.95852,0.97013,0.97986,0.98769,0.99361,0.99761,0.99968,0.99982,0.99803,0.9943,0.98865,0.98109,0.97163,0.96029,0.9471,0.93207,0.91524,0.89664,0.87631,0.85428,0.8306,0.80531,0.77846,0.75011,0.72031,0.68911,0.65659,0.62279,0.58779,0.55165,0.51444,0.47624,0.43712,0.39715,0.35641,0.31499,0.27295,0.23039,0.18738,0.14401,0.10036,0.056519,0.012566,-0.031411,-0.075327,-0.1191,-0.16264,-0.20586,-0.24869,-0.29104,-0.33282,-0.37396,-0.41438,-0.45399,-0.49273,-0.53051,-0.56727,-0.60293,-0.63742,-0.67069,-0.70265,-0.73326,-0.76244,-0.79016,-0.81634,-0.84094,-0.86392,-0.88523,-0.90483,-0.92267,-0.93873,-0.95298,-0.96538,-0.97592,-0.98456,-0.99131,-0.99613,-0.99903,-1,-0.99903,-0.99613,-0.99131,-0.98456,-0.97592,-0.96538,-0.95298,-0.93873,-0.92267,-0.90483,-0.88523,-0.86392,-0.84094,-0.81634,-0.79016,-0.76244,-0.73326,-0.70265,-0.67069,-0.63742,-0.60293,-0.56727,-0.53051,-0.49273,-0.45399,-0.41438,-0.37396,-0.33282,-0.29104,-0.24869,-0.20586,-0.16264,-0.1191,-0.075327,-0.031411,0.012566,0.056519,0.10036,0.14401,0.18738,0.23039,0.27295,0.31499,0.35641,0.39715,0.43712,0.47624,0.51444,0.55165,0.58779,0.62279,0.65659,0.68911,0.72031,0.75011,0.77846,0.80531,0.8306,0.85428,0.87631,0.89664,0.91524,0.93207,0.9471,0.96029,0.97163,0.98109,0.98865,0.9943,0.99803,0.99982,0.99968,0.99761,0.99361,0.98769,0.97986,0.97013,0.95852,0.94506,0.92978,0.91269,0.89384,0.87326,0.85099,0.82708,0.80157,0.7745,0.74594,0.71594,0.68455,0.65183,0.61786,0.58269,0.54639,0.50904,0.4707,0.43146,0.39137,0.35053,0.30902,0.2669,0.22427,0.18121,0.13779,0.094108,0.050244,0.0062831,-0.03769,-0.081591,-0.12533,-0.16883,-0.21201,-0.25477,-0.29704,-0.33874,-0.37978,-0.42009,-0.45958,-0.49819,-0.53583,-0.57243,-0.60793,-0.64225,-0.67533,-0.70711,-0.73751,-0.76649,-0.79399,-0.81995,-0.84433,-0.86707,-0.88814,-0.90748,-0.92508,-0.94088,-0.95486,-0.967,-0.97727,-0.98564,-0.99211,-0.99667,-0.99929,-0.99998,-0.99874,-0.99556,-0.99046,-0.98345,-0.97453,-0.96372,-0.95106,-0.93655,-0.92023,-0.90213,-0.88229,-0.86074,-0.83753,-0.81269,-0.78629,-0.75836,-0.72897,-0.69817,-0.66601,-0.63257,-0.5979,-0.56208,-0.52517,-0.48725,-0.44838,-0.40865,-0.36812,-0.32689,-0.28502,-0.2426,-0.19971,-0.15643,-0.11286,-0.06906,-0.02513,0.018848,0.062791,0.10661,0.15023,0.19355,0.2365,0.27899,0.32094,0.36228,0.40291,0.44276,0.48175,0.51982,0.55688,0.59286,0.62769,0.66131,0.69365,0.72465,0.75425,0.78239,0.80902,0.83408,0.85753,0.87932,0.89941,0.91775,0.93433,0.9491,0.96203,0.9731,0.98229,0.98958,0.99495,0.9984,0.99992,0.99951,0.99716,0.99288,0.98669,0.97858,0.96858,0.95671,0.94299,0.92745,0.91011,0.89101,0.87018,0.84768,0.82353,0.79779,0.77051,0.74174,0.71154,0.67995,0.64706,0.61291,0.57757,0.54112,0.50362,0.46515,0.42578,0.38558,0.34464,0.30304,0.26084,0.21814,0.17502,0.13156,0.087851,0.043968,-2.6955e-015,-0.043968,-0.087851,-0.13156,-0.17502,-0.21814,-0.26084,-0.30304,-0.34464,-0.38558,-0.42578,-0.46515,-0.50362,-0.54112,-0.57757,-0.61291,-0.64706,-0.67995,-0.71154,-0.74174,-0.77051,-0.79779,-0.82353,-0.84768,-0.87018,-0.89101,-0.91011,-0.92745,-0.94299,-0.95671,-0.96858,-0.97858,-0.98669,-0.99288,-0.99716,-0.99951,-0.99992,-0.9984,-0.99495,-0.98958,-0.98229,-0.9731,-0.96203,-0.9491,-0.93433,-0.91775,-0.89941,-0.87932,-0.85753,-0.83408,-0.80902,-0.78239,-0.75425,-0.72465,-0.69365,-0.66131,-0.62769,-0.59286,-0.55688,-0.51982,-0.48175,-0.44276,-0.40291,-0.36228,-0.32094,-0.27899,-0.2365,-0.19355,-0.15023,-0.10661,-0.062791,-0.018848,0.02513,0.06906,0.11286,0.15643,0.19971,0.2426,0.28502,0.32689,0.36812,0.40865,0.44838,0.48725,0.52517,0.56208,0.5979,0.63257,0.66601,0.69817,0.72897,0.75836,0.78629,0.81269,0.83753,0.86074,0.88229,0.90213,0.92023,0.93655,0.95106,0.96372,0.97453,0.98345,0.99046,0.99556,0.99874,0.99998,0.99929,0.99667,0.99211,0.98564,0.97727,0.967,0.95486,0.94088,0.92508,0.90748,0.88814,0.86707,0.84433,0.81995,0.79399,0.76649,0.73751,0.70711,0.67533,0.64225,0.60793,0.57243,0.53583,0.49819,0.45958,0.42009,0.37978,0.33874,0.29704,0.25477,0.21201,0.16883,0.12533,0.081591,0.03769,-0.0062831,-0.050244,-0.094108,-0.13779,-0.18121,-0.22427,-0.2669,-0.30902,-0.35053,-0.39137,-0.43146,-0.4707,-0.50904,-0.54639,-0.58269,-0.61786,-0.65183,-0.68455,-0.71594,-0.74594,-0.7745,-0.80157,-0.82708,-0.85099,-0.87326,-0.89384,-0.91269,-0.92978,-0.94506,-0.95852,-0.97013,-0.97986,-0.98769,-0.99361,-0.99761,-0.99968,-0.99982,-0.99803,-0.9943,-0.98865,-0.98109,-0.97163,-0.96029,-0.9471,-0.93207,-0.91524,-0.89664,-0.87631,-0.85428,-0.8306,-0.80531,-0.77846,-0.75011,-0.72031,-0.68911,-0.65659,-0.62279,-0.58779,-0.55165,-0.51444,-0.47624,-0.43712,-0.39715,-0.35641,-0.31499,-0.27295,-0.23039,-0.18738,-0.14401,-0.10036,-0.056519,-0.012566,0.031411,0.075327,0.1191,0.16264,0.20586,0.24869,0.29104,0.33282,0.37396,0.41438,0.45399,0.49273,0.53051,0.56727,0.60293,0.63742,0.67069,0.70265,0.73326,0.76244,0.79016,0.81634,0.84094,0.86392,0.88523,0.90483,0.92267,0.93873,0.95298,0.96538,0.97592,0.98456,0.99131,0.99613,0.99903,1,0.99903,0.99613,0.99131,0.98456,0.97592,0.96538,0.95298,0.93873,0.92267,0.90483,0.88523,0.86392,0.84094,0.81634,0.79016,0.76244,0.73326,0.70265,0.67069,0.63742,0.60293,0.56727,0.53051,0.49273,0.45399,0.41438,0.37396,0.33282,0.29104,0.24869,0.20586,0.16264,0.1191,0.075327,0.031411,-0.012566,-0.056519,-0.10036,-0.14401,-0.18738,-0.23039,-0.27295,-0.31499,-0.35641,-0.39715,-0.43712,-0.47624,-0.51444,-0.55165,-0.58779,-0.62279,-0.65659,-0.68911,-0.72031,-0.75011,-0.77846,-0.80531,-0.8306,-0.85428,-0.87631,-0.89664,-0.91524,-0.93207,-0.9471,-0.96029,-0.97163,-0.98109,-0.98865,-0.9943,-0.99803,-0.99982,-0.99968,-0.99761,-0.99361,-0.98769,-0.97986,-0.97013,-0.95852,-0.94506,-0.92978,-0.91269,-0.89384,-0.87326,-0.85099,-0.82708,-0.80157,-0.7745,-0.74594,-0.71594,-0.68455,-0.65183,-0.61786,-0.58269,-0.54639,-0.50904,-0.4707,-0.43146,-0.39137,-0.35053,-0.30902,-0.2669,-0.22427,-0.18121,-0.13779,-0.094108,-0.050244,-0.0062831,0.03769,0.081591,0.12533,0.16883,0.21201,0.25477,0.29704,0.33874,0.37978,0.42009,0.45958,0.49819,0.53583,0.57243,0.60793,0.64225,0.67533,0.70711,0.73751,0.76649,0.79399,0.81995,0.84433,0.86707,0.88814,0.90748,0.92508,0.94088,0.95486,0.967,0.97727,0.98564,0.99211,0.99667,0.99929,0.99998,0.99874,0.99556,0.99046,0.98345,0.97453,0.96372,0.95106,0.93655,0.92023,0.90213,0.88229,0.86074,0.83753,0.81269,0.78629,0.75836,0.72897,0.69817,0.66601,0.63257,0.5979,0.56208,0.52517,0.48725,0.44838,0.40865,0.36812,0.32689,0.28502,0.2426,0.19971,0.15643,0.11286,0.06906,0.02513,-0.018848,-0.062791,-0.10661,-0.15023,-0.19355,-0.2365,-0.27899,-0.32094,-0.36228,-0.40291,-0.44276,-0.48175,-0.51982,-0.55688,-0.59286,-0.62769,-0.66131,-0.69365,-0.72465,-0.75425,-0.78239,-0.80902,-0.83408,-0.85753,-0.87932,-0.89941,-0.91775,-0.93433,-0.9491,-0.96203,-0.9731,-0.98229,-0.98958,-0.99495,-0.9984,-0.99992,-0.99951,-0.99716,-0.99288,-0.98669,-0.97858,-0.96858,-0.95671,-0.94299,-0.92745,-0.91011,-0.89101,-0.87018,-0.84768,-0.82353,-0.79779,-0.77051,-0.74174,-0.71154,-0.67995,-0.64706,-0.61291,-0.57757,-0.54112,-0.50362,-0.46515,-0.42578,-0.38558,-0.34464,-0.30304,-0.26084,-0.21814,-0.17502,-0.13156,-0.087851,-0.043968,5.3909e-015,0.043968,0.087851,0.13156,0.17502,0.21814,0.26084,0.30304,0.34464,0.38558,0.42578,0.46515,0.50362,0.54112,0.57757,0.61291,0.64706,0.67995,0.71154,0.74174,0.77051,0.79779,0.82353,0.84768,0.87018};
 	//*messynav*/double sampleval[2000] = {135,133,133,130,129,127,126,124,123,123,121,120,119,118,118,117,117,118,117,117,119,118,118,120,121,122,124,124,126,126,128,128,131,131,132,133,134,136,137,138,139,139,140,139,138,136,135,134,133,131,130,130,128,128,125,124,124,123,122,122,121,120,119,118,117,118,117,117,117,117,119,116,117,119,118,120,120,121,124,124,125,127,128,130,130,131,133,133,135,136,137,138,140,141,141,141,141,141,141,140,140,139,137,136,134,132,132,130,129,128,127,125,123,122,121,121,120,121,120,118,119,118,117,117,117,117,117,116,116,116,117,117,117,118,119,118,120,122,123,124,125,126,128,129,130,132,134,134,135,137,136,139,139,139,140,140,141,142,141,140,139,138,138,136,135,133,131,131,130,129,128,127,126,125,123,123,122,121,121,120,119,118,118,117,117,117,117,118,134,136,136,138,138,138,140,139,139,140,138,139,138,137,135,133,132,130,128,126,125,124,124,123,121,120,118,118,117,116,117,117,117,117,116,116,116,116,117,118,120,121,122,124,125,126,127,129,130,131,132,133,135,136,137,137,138,140,141,141,142,143,143,143,141,140,138,137,136,134,133,131,130,128,128,126,124,123,122,121,121,120,118,118,117,116,116,116,116,116,117,118,118,117,119,119,121,121,122,124,125,126,127,129,130,131,133,134,135,136,139,140,142,142,144,143,144,144,145,146,145,146,143,144,140,140,138,136,137,134,133,131,132,129,128,125,124,123,124,122,121,120,119,119,118,118,119,119,119,118,119,119,119,118,117,116,118,118,118,118,119,119,122,122,123,124,126,129,130,132,133,134,135,137,138,139,141,140,141,140,140,139,138,137,135,133,133,131,126,128,128,129,131,131,132,132,134,134,135,134,135,135,136,133,132,131,129,128,126,126,125,124,122,122,121,121,119,119,118,118,116,117,117,118,117,117,117,117,117,117,117,118,120,119,121,122,123,125,125,127,127,129,129,131,131,132,134,135,136,138,138,139,137,136,135,134,132,132,130,129,128,127,127,125,123,122,122,121,119,119,120,120,118,118,118,117,117,116,117,117,117,116,118,118,118,118,119,119,120,121,121,122,122,123,125,126,128,128,129,129,130,130,131,131,133,133,135,136,136,136,136,134,134,133,132,130,128,128,127,126,124,125,123,121,120,121,120,119,119,120,119,118,117,117,117,116,116,117,117,116,116,117,117,117,116,116,116,116,117,117,118,119,120,121,122,123,126,125,126,127,128,129,129,130,132,133,133,134,134,135,136,137,136,137,137,137,135,133,133,130,129,127,126,124,123,123,121,120,119,118,118,117,117,118,117,117,119,118,118,120,121,122,124,124,126,126,128,128,131,131,132,133,134,136,137,138,139,139,140,139,138,136,135,134,133,131,130,130,128,128,125,124,124,123,122,122,121,120,119,118,117,118,117,117,117,117,119,116,117,119,118,120,120,121,124,124,125,127,128,130,130,131,133,133,135,136,137,138,140,141,141,141,141,141,141,140,140,139,137,136,134,132,132,130,129,128,127,125,123,122,121,121,120,121,120,118,119,118,117,117,117,117,117,116,116,116,117,117,117,118,119,118,120,122,123,124,125,126,128,129,130,132,134,134,135,137,136,139,139,139,140,140,141,142,141,140,139,138,138,136,135,133,131,131,130,129,128,127,126,125,123,123,122,121,121,120,119,118,118,117,117,117,117,118,134,136,136,138,138,138,140,139,139,140,138,139,138,137,135,133,132,130,128,126,125,124,124,123,121,120,118,118,117,116,117,117,117,117,116,116,116,116,117,118,120,121,122,124,125,126,127,129,130,131,132,133,135,136,137,137,138,140,141,141,142,143,143,143,141,140,138,137,136,134,133,131,130,128,128,126,124,123,122,121,121,120,118,118,117,116,116,116,116,116,117,118,118,117,119,119,121,121,122,124,125,126,127,129,130,131,133,134,135,136,139,140,142,142,144,143,144,144,145,146,145,146,143,144,140,140,138,136,137,134,133,131,132,129,128,125,124,123,124,122,121,120,119,119,118,118,119,119,119,118,119,119,119,118,117,116,118,118,118,118,119,119,122,122,123,124,126,129,130,132,133,134,135,137,138,139,141,140,141,140,140,139,138,137,135,133,133,131,126,128,128,129,131,131,132,132,134,134,135,134,135,135,136,133,132,131,129,128,126,126,125,124,122,122,121,121,119,119,118,118,116,117,117,118,117,117,117,117,117,117,117,118,120,119,121,122,123,125,125,127,127,129,129,131,131,132,134,135,136,138,138,139,137,136,135,134,132,132,130,129,128,127,127,125,123,122,122,121,119,119,120,120,118,118,118,117,117,116,117,117,117,116,118,118,118,118,119,119,120,121,121,122,122,123,125,126,128,128,129,129,130,130,131,131,133,133,135,136,136,136,136,134,134,133,132,130,128,128,127,126,124,125,123,121,120,121,120,119,119,120,119,118,117,117,117,116,116,117,117,116,116,117,117,117,116,116,116,116,117,117,118,119,120,121,122,123,126,125,126,127,128,129,129,130,132,133,133,134,134,135,136,137,136,137,137,137};
/*====================*
 * function methods *
 *====================*/
 
//contructor and destructor ===================================
 
	ControlSystemIB2::ControlSystemIB2(){}
	ControlSystemIB2::~ControlSystemIB2(){}

	extern double NavForSlice;
	double NavForSlice;
	extern int	ResetFlag;
	int	ResetFlag;

// Function: InitScoutVal_ib ==============================
//
//	sets xfft to zero
//	sets counter to zero
//	arguments:	void
//	returns:	void
//	-----------------------------------------------------

void ControlSystemIB2::InitScoutVal_ib()
{
	for(m_iCounterSVSet=0; m_iCounterSVSet<=1024; m_iCounterSVSet++)
	{
		/*scoutValue*/m_dXfft[m_iCounterSVSet] = 0;
	}
	m_iCounterSV 	= 0;
	m_iXCounter1 	= 0;
	m_iXCounter2 	= 0;
	m_iCounterOut	= 0;
	m_iCounterC		= -1;

	saveib.FileSaveOpen();	
}

// Function: InitializeConditions_ib ==============================
//
//	set initial conditions for control system, and
//	get navigator info
//		- amount of navigators
//		- TR of navigators
//	arguments:	long numOfNavs1, long navTr1
//	returns:	void
//	--------------------------------------------------------------
   
void ControlSystemIB2::InitializeConditions_ib(long lNumOfNavs, long lNavTr, long lImTr)
{   
  	m_dNumOfNavs	= double(lNumOfNavs);
  	m_dNavTr 		= double(lNavTr);							//(ms)
  	m_dImTr			= double(lImTr)/1000;						//(us)->ms
  	m_dExtraTime	= m_dNavTr - Modulus_ib(m_dImTr,m_dNavTr);	// ms
	
	m_dX[0][0]		= 0;
	m_dX[1][0]		= 0;
	//m_iNum			= 0;

	CalculateAve_ib();
	CalculateFFT_ib();	//2^m	 2^10	

	cout<<"ave================"<<m_dAve<<endl;
	CalculateSystemValues_ib();	
	cout <<"InitializeConditions_ib-----navTr = "<<m_dNavTr<<endl;
	cout <<"InitializeConditions_ib-----imTr = "<<m_dImTr<<endl;
	//cout <<"InitializeConditions_ib-----extraTime = "<<m_dExtraTime*1000<<" ms"<<endl;
	//cout <<"InitializeConditions_ib-----namof navs = "<<m_dNumOfNavs<<endl;
}

// Function: CalculateSystemValues_ib ========================================
//
//	Get all the control system values
//	arguments:	void
//	returns:	void
//	-------------------------------------------------------------------------

void ControlSystemIB2::CalculateSystemValues_ib()
{		
	m_dZestR	= 0.265; 
	m_dZestI	= 0.25454;
	m_dZest1	= -2 * m_dZestR;
	m_dZest2	= m_dZestI*m_dZestI + m_dZestR*m_dZestR;
	
	cout<<"navtr in cs = ======"<<m_dNavTr<<endl;
	m_dTs 		= m_dNavTr/10000;			//(seconds)		// = 0.01;		// = 0.0001
	m_dA 		= 2*m_dKsin * PI/10;		//moet nog n error message vir die ding skryf (waardes moet tussen 2 grense le)
	
	//cout<<"-----------a = "<< m_dA <<endl;
	//cout<<"-----------k_sin = "<< m_dKsin <<endl;
	//m_dA		= 1.4*2*PI/4;	//m_dKsin * 180/PI)/10;	was 8		// = 400;		
	
	m_dH[0][0]	= 1;
	m_dH[0][1]	= 0;
	
	m_dPhi[0][0] 	= 1;
	m_dPhi[0][1] 	= -m_dA*m_dA*m_dTs;
	m_dPhi[1][0] 	= m_dTs;
	m_dPhi[1][1] 	= 1;
	
	m_dLp[0][0]	= m_dZest1 + 2;												// = -2 * m_dZestR;		//=   0.7;
	m_dLp[1][0]	= (1 - m_dZest2 - m_dLp[0][0]) / (m_dA * m_dA * m_dTs); 	// = (m_dLp[0][0] - 0.28)/(m_dA*m_dA*m_dTs);
	
	cout <<"lp"<<m_dLp[0][0]<<"and"<<m_dLp[1][0]<<endl;	      
	cout <<"phi"<<m_dPhi[0][1]<<"and"<<m_dPhi[1][0]<<endl;	
}

// Function: SaveData_ib =============================
//
//	arguments:	void
//	returns:	void
//	-------------------------------------------------------------------------

void ControlSystemIB2::SaveData_ib()
{
	saveib.FileSaveAccess(m_dNumOfNavs,			4);
	saveib.FileSaveAccess(m_dNavTr,				4);
	saveib.FileSaveAccess(m_dImTr,				4);
	saveib.FileSaveAccess((m_dImTr/m_dNavTr),	4);	//predictSamples
	saveib.FileSaveAccess(m_dExtraTime,			4);
	saveib.FileSaveAccess(m_dA,					4);
	saveib.FileSaveAccess(m_dAve,				4);
	//saveib.FileSaveAccess(1234,				4);
	cout<<"-----lalalazz----"<<m_dNumOfNavs<<endl<<m_dNavTr<<endl<<m_dImTr<<endl<<m_dImTr/m_dNavTr<<endl<<m_dExtraTime<<endl<<m_dA<<endl<<m_dAve<<endl;
}

// Function: Update_ib ===========================================
//	
//	creates the x(k+1) for the next perdiod
//	arguments:	double yplant
//	returns:	void
//	-------------------------------------------------------------
  
void ControlSystemIB2::Update_ib()			//receive the adress of yplant
{
	double	tempX[2] = {0.0, 0.0};

	cout<<m_dYPlant<<endl;
	//cout<<"xcounter ==="<<m_iXCounter1<<endl;
	//cout<<m_dyCS<<endl;
	//cout<<"counterC = "<<m_iCounterC<<endl;
	
	tempX[0] = m_dPhi[0][0] * m_dX[0][0] + m_dPhi[0][1] * m_dX[1][0] + m_dLp[0][0] * m_dXer;
	tempX[1] = m_dPhi[1][0] * m_dX[0][0] + m_dPhi[1][1] * m_dX[1][0] + m_dLp[1][0] * m_dXer;
	
	m_dX[0][0] = tempX[0];
	m_dX[1][0] = tempX[1];
	m_iCounterC++;
}

// Function: Outputs_ib ==========================================
//
//	calculates the output of the control system
//	will return value for slice folow
//	arguments:	void
//	returns:	void
//	--------------------------------------------------------------

void ControlSystemIB2::Outputs_ib()
{   
	m_dyCS = m_dH[0][0]*m_dX[0][0] + m_dH[0][1]*m_dX[1][0];
	//cout <<m_dyCS<<endl;
	NavForSlice				= m_dyCS;
	m_dYSave[m_iCounterOut] = m_dyCS;
	m_iCounterOut++;

	saveib.FileSaveAccess(m_dyCS, 2);
}

void ControlSystemIB2::CloseCS_ib()
{
	SaveData_ib();
	saveib.FileSaveClose();
}

//-------------------time calculations----------------------------

void ControlSystemIB2::Calculations(long lTa, long lTb, long lTc)
{
	m_dTa		= double(lTa);						// where acquisition starts
	m_dTb		= double(lTb);						// where acquisitions ends
	m_dTc		= double(lTc);						// end of cardiac cycle
	
	m_dTprep 		= 60;									//is nie reg nie!!!!!!!!!!!!!!!!
	m_dTacq  		= m_dTprep + (m_dTb - m_dTa);			// scanning time and pep time together
	m_dNumOfNavs	= double(int((m_dTa - m_dTprep) / m_dNavTr));	// calculate
	m_dTwait 		= m_dTa - m_dTprep - (m_dNavTr * m_dNumOfNavs); 	
	//m_dTdead		= double(sTRr) - (m_dTwait + (m_dNavTr * m_dNumOfNavs) + m_dTacq);
				
	m_dPredictSamples	= int((m_dTc - m_dTa + m_dTprep + m_dTwait) / m_dNavTr);
	
	cout<<"Ta 				= "<<m_dTa<<endl;
	cout<<"Tb 				= "<<m_dTb<<endl;
	cout<<"Tc 				= "<<m_dTc<<endl;	
	cout<<"Tprep 			= "<<m_dTprep<<endl;	
	cout<<"NavTr 			= "<<m_dNavTr<<endl;
	cout<<"NumOfNavs 		= "<<m_dNumOfNavs<<endl;
	cout<<"Tacq 			= "<<m_dTacq<<endl;
	cout<<"Twait 			= "<<m_dTwait<<endl;
	cout<<"predictSamples	= "<<m_dPredictSamples<<endl;
	cout<<"==============="<<endl;
}

void ControlSystemIB2::calculateTdead(short Trr)
{
	//sTRr = 1000;
	int SamplesToAdd;
	
	m_dTdead 			= double(sTRr) - (m_dTwait + (m_dNavTr * m_dNumOfNavs) + m_dTacq);
	m_dSamplesPassed	= int((m_dTacq + m_dTdead + m_dTwait) / m_dNavTr);
	m_dTimeLeft 		= Modulus_ib((m_dTacq + m_dTdead + m_dTwait),  m_dNavTr);
		
 	if ( m_dTimeLeft > (m_dNavTr / 2) ) 
 	{
 		m_dSamplesPassed++;
 	}	
	
	SamplesToAdd = int(m_dSamplesPassed - m_dPredictSamples);
		
	if (SamplesToAdd < 0)
	{
		cout<<"poop"<<endl;		//lel
	}
	
	for(m_iCounterDead=0; m_iCounterDead<SamplesToAdd; m_iCounterDead++)	
	{
		m_dXer		= 0.00;
		m_dYPlant	= 0;

		Update_ib();
		Outputs_ib();

		m_iXCounter1++;
		m_iCounterC	= -1;
	}
			
//  	cout<<"Trr   			= "<<sTRr<<endl;
//  	cout<<"Tdead 			= "<<m_dTdead<<endl;		
//  	cout<<"samples_passed 	= "<<m_dSamplesPassed<<endl;
//  	cout<<"time_left 		= "<<m_dTimeLeft<<endl;		//this is the time that passed extra to the time which fits into full samples
}

//-------------------getters and setters----------------------------

int ControlSystemIB2::getNoOfNavs()
{
	return int(m_dNumOfNavs);	
}

long ControlSystemIB2::getTwait()
{
	return long(m_dTwait * 1000);		//seconds->us	and double to long
}

// Function: setScoutOn_ib ==============================
//
//	set that scout is on 
//	arguments:	bool scout
//	returns:	void
//	-----------------------------------------------------
   
void ControlSystemIB2::setScoutOn_ib(bool bScout)
{
	m_bScoutOn = bScout;
}
	
// Function: getScoutOn_ib ==============================
//
//	to see whether scout is on.. 
//	arguments:	void
//	returns:	bool scoutOn
//	-----------------------------------------------------
   
bool ControlSystemIB2::getScoutOn_ib()
{
	return m_bScoutOn;
}

// Function: getCSOut ==============================
//
//	return cs output to kernel via friend 
//	arguments:	void
//	returns:	double
//	-----------------------------------------------------

double ControlSystemIB2::getCSOut()
{
	return m_dyCS;
}

// Function: setNavVal_ib ==============================
//
//	receives the navigator value
//	assigns it to the fft input variable if its scout
//	assigns it to the input to the control system if its not
//
//	arguments:	double NavValueImport, bool IsScout
//	returns:	void
//	---------------------------------------------------

void ControlSystemIB2::setNavVal_ib(double dNavValueImport, bool bScout)
{
	saveib.FileSaveAccess(dNavValueImport, 1);		
	if ( bScout )
	{
		/*scoutValue*/ m_dXfft[m_iCounterSV] = dNavValueImport;
		m_iCounterSV++;
	}
	else //!bScout
	{
		m_dYPlant	= dNavValueImport;//-ave;					//ib-nbnbnbnb		
		//cout<<dNavValueImport<<endl;
				
		m_dXer		= m_dYPlant - m_dyCS;
		//cout<<"normal"<<endl;
		Update_ib();
		Outputs_ib();
		
		while (m_iCounterC >= (int(m_dNumOfNavs)-1))			//numOfNavs oppi oomblik 4
		{
			m_dXer 		= 0.00;
			m_dYPlant	= 0;
			if (m_iCounterC >= int(m_dNumOfNavs + m_dPredictSamples-1 ))	// 6-1)
			{
				m_iCounterC = -1;
				break;
			}
			//cout<<"predict"<<endl;
			Update_ib();
			Outputs_ib();
		}
	}	
}

//-------------------debug----------------------------

// Function: PlayOutCS_ib =========================================
//
//	just for debug..runs control system - modify for real use
//	arguments:	void
//	returns:	void
//	--------------------------------------------------------------

void ControlSystemIB2::PlayOutCS_ib()
{
	//Outputsib();
	//Updateib();
}

// Function: XSampleVal_ib ==============================
//
//	just for debug..feeds dummy navigator values
//	arguments:	void
//	returns:	void
//	----------------------------------------------------	
	
double ControlSystemIB2::XSampleVal_ib()
{	
	m_iXCounter1++;
	m_iXCounter2++;
	//cout<<"xcounter ==="<<m_iXCounter1<<endl;
	
		if (m_bScoutOn == false)			//numOfNavs oppi oomblik 4
		{	
			if (m_iXCounter2 >= int(m_dNumOfNavs))
			{
				m_iXCounter1 += int(m_dPredictSamples);
				m_iXCounter2 =  0;
			}
		}
	if(m_iXCounter1 >= 1024)
	{
		m_iXCounter1 = 0;
	}
	
	return sampleval[m_iXCounter1];
}

///==================================maths===================================================================//

// Function: modulusib ==============================
//
//	get modulus of two doubles
//	arguments:	double a, double b
//	returns:	double
//	-----------------------------------------------------
double ControlSystemIB2::Modulus_ib(double dA, double dB)
{
	int result = static_cast<int>( dA / dB );
	return dA - static_cast<double>( result ) * dB;
}

// 	Function: CalculateAve_ib ========================================


//	arguments:	
//	returns:	double

//	-------------------------------------------------------------------

void ControlSystemIB2::CalculateAve_ib()
{
	double sum;
	sum = 0;
	for(int i=0; i<256; i++)
	{
		sum += m_dXfft[i];
		//cout<<sum<<endl;
	}
	m_dAve = sum/256;
}

// 	Function: CalculateFFT_ib ========================================

//	This computes an in-place complex-to-complex FFT 
//	x and y are the real and imaginary arrays of 2^m points.
//	dir = 1 gives forward transform
//	dir = -1 gives reverse transform 
//
//	is zero-padded to 1024 (2^10) from 512
//	arguments:	void
//	returns:	void

//	double X[] = sampleval;
//	get an array from filter
//	FFT (Fast Fourier Transform)
//	-------------------------------------------------------------------

void ControlSystemIB2::CalculateFFT_ib()
{		
	//cout<<"CalculateFFT_ib()"<<endl;

	//for (int t=0;t<1024;t++)
	//{
	//	cout<<m_dXfft[t]<<endl;	
	//}
	
	//double X[] = sampleval;
	//get an array from filter
	//FFT (Fast Fourier Transform)
	
	short int dir = 1;
	long i,j,k,l;
	long n, i1,i2, l1,l2;
	double c1,c2, tx,ty,t1,t2, u1,u2, z;
	double y[2000] = {0};

	cout <<"start fft"<<endl;	   
	long m = 10;
	/* Calculate the number of points */
	n = 1;
	for (int i=0; i<m; i++)	n *= 2;
	//cout<< "n = "<<n;

	/* Do the bit reversal */
	i2 = n >> 1;
	j = 0;
	for (i=0; i<n-1; i++)
	{
		if (i < j) 
		{
			ty			= y[i];
			tx			= m_dXfft[i];
			m_dXfft[i]	= m_dXfft[j];
			m_dXfft[j]	= tx;
			y[i]		= y[j];
			y[j]		= ty;
		}
		k = i2;
		while (k <= j) 
		{
			j  -= k;
			k >>= 1;
		}
		j += k;
	}
	
	/* Compute the FFT */
	c1 = -1.0; 
	c2 = 0.0;
	l2 = 1;
	for (l=0; l<m; l++)
	{
		l1	 = l2;
		l2 <<= 1;
		u1	 = 1.0; 
		u2	 = 0.0;
		for (j=0; j<l1; j++) 
		{
			for (i=j; i<n; i+=l2)
			{
				i1			= i + l1;
				t1			= u1*m_dXfft[i1] - u2*y[i1];
				t2			= u1*y[i1] + u2*m_dXfft[i1];
				m_dXfft[i1] = m_dXfft[i] - t1; 
				y[i1]		= y[i] - t2;
				m_dXfft[i] += t1;
				y[i]	   += t2;
			}
			z	= u1*c1 - u2*c2;
			u2	= u1*c2 + u2*c1;
			u1	= z;
		}
		c2 = sqrt((1.0 - c1) / 2.0);
		if (dir == 1)	c2 = -c2;
		c1 = sqrt((1.0 + c1) / 2.0);
	}
	
	/* Scaling for forward transform */
	if (dir == 1)
	{
		for (i=0; i<n; i++)
		{
			m_dXfft[i]	/= n;
			y[i]		/= n;
			 saveib.FileSaveAccess(m_dXfft[i], 3);		//write fft values to file
			//cout<<m_dXfft[i]<<endl;
			//cout<<"fftloop"<<endl;	   
		}
	}
	cout<<"dc value =="<<m_dXfft[0]<<endl;
	m_dXfft[0] = 0;
	Max_ib(m_dXfft);		//see pg 269	adress of the first position in the array
}

// Function: Max_ib ========================================
//
//	calculate the frequency of the respiration from the fft 
//	of scout collected data
//	arguments:	double *in
//	returns:	void
//	-------------------------------------------------------

void ControlSystemIB2::Max_ib(double *dIn)
{
	double out = 0;
	int i;
	
	//cout <<"------------------------------------------"<<endl;
	
	for (i=0; i<32; i++)		//511 = size / 2 - 1 must change this!!!
	{	
		//cout <<fabs(*(dIn+i))<<endl;
		if( out < fabs(*(dIn + i)) )			// *(dIn+1) is the second position in the array, C knows how big each position is .. see pg 269 if unclear
		{
			out		= fabs(*(dIn + i));
			m_dKsin	= i+1; 		//+1 to compensate for the 0
			cout <<"freq = "<<i<<endl;
		}
	}
	//DrawSin_ib();			///just to test. remove later
}

// Function: SliceSelection_ib ==========================================
//
//	calculates the slice select matrix
//	returns the value for slice folowing
//	arguments:	void ?
//	returns:	void ?
//	--------------------------------------------------------------

void ControlSystemIB2::SliceSelection_ib()//double in, double scalefactor)
{
	double trasMatrix[3] = {0};
	double scalefactor;
	double in;
	/*				
					| sagib |		sagital			
	transMatrix = 	| corib |		coronal
					| traib |		transverse
	*/

	trasMatrix[0] = scalefactor * in * .7;
	trasMatrix[1] = 0;
	trasMatrix[2] = scalefactor * in * 2;
}

//====================================0===0==========================================
//======================================o============================================
//====================================\===/==========================================
//=====================================---==========================================

//=================RIP===================
	
// Function: CalculatePeriod_ib ========================================
// 
// double ControlSystemIB2::CalculatePeriod_ib(double *scoutval)
// {		
// 	//get an array from filter
// 	double period;
// 	period = CalculateFFT(LowPassFilter(*scoutval));
// 	return period
// }

// Function: LowPassFilter_ib ========================================

// double ControlSystemIB2::LowPassFilter_ib(double input)
//{		
	
// double weight = 0.1;			// weight = 1 same as input
// double count=1000;				//set to a certain value... this is the same amount as the amount of samples obtained in the 'scout'
//  double output;
// int ii;
// output[0] = input[0];
// for ( ii=1; ii<count; ii++ )
// {
//   output[ ii ] = weight * input [ii ] + ( 1.0 - weight ) * output[ ii-1 ];
// }
//  return output;
// }

/*
// Function: DrawSin_ib ========================================

void ControlSystemIB2::DrawSin_ib()		///just to test. remove later
{
	cout <<"-------------------created sin---------------k_sin= "  << k_sin << "--------" <<endl;
	double Ts = 0.01;
	double sss;
	int t;

	for (t=0;t<1024;t++)
	{
		sss = sin(2*PI*t*Ts*(k_sin)/10);	//= sin(2*PI*t*Ts*(k_sin)/10);;  met Ts= 0.01 en a matlab sin wat so lyk =sin(2*pi*t*0.01*0.14) is dit perfek identies
		//cout <<sss<<endl;				///en sin_k = 14	en die 10 kom van  1024 = (2^10) van die fft
	}
}

// Function: Startib ============================================
   
void ControlSystemIB2::Startib()
{
}
  
// Function: Terminateib ========================================

void ControlSystemIB2::Terminateib()
{
}
*/